{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/FX506/Desktop/Allumee/src/components/Scene.tsx"],"sourcesContent":["\"use client\";\r\n\r\ninterface SceneProps {\r\n  name: string;\r\n  duration: number;\r\n  onDelete?: () => void;\r\n  onAdd?: () => void;\r\n  onNameChange?: (newName: string) => void;\r\n  onDurationChange?: (newDuration: number) => void;\r\n}\r\n\r\nexport default function Scene({ name, duration, onDelete, onAdd, onNameChange, onDurationChange }: SceneProps) {\r\n  return (\r\n    <div className=\"border p-4 m-2 flex items-center justify-between bg-white shadow\">\r\n      <input\r\n        type=\"text\"\r\n        value={name}\r\n        onChange={(e) => onNameChange?.(e.target.value)}\r\n        className=\"border p-2 w-32\"\r\n      />\r\n      <input\r\n        type=\"number\"\r\n        value={duration}\r\n        onChange={(e) => onDurationChange?.(parseInt(e.target.value) || 0)}\r\n        className=\"border p-2 w-20\"\r\n      />\r\n      <div className=\"space-x-2\">\r\n        {onDelete && (\r\n          <button className=\"bg-red-500 text-white px-3 py-1 rounded\" onClick={onDelete}>-</button>\r\n        )}\r\n        {onAdd && (\r\n          <button className=\"bg-green-500 text-white px-3 py-1 rounded\" onClick={onAdd}>+</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAWe,SAAS,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,YAAY,EAAE,gBAAgB,EAAc;IAC3G,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBACC,MAAK;gBACL,OAAO;gBACP,UAAU,CAAC,IAAM,eAAe,EAAE,MAAM,CAAC,KAAK;gBAC9C,WAAU;;;;;;0BAEZ,8OAAC;gBACC,MAAK;gBACL,OAAO;gBACP,UAAU,CAAC,IAAM,mBAAmB,SAAS,EAAE,MAAM,CAAC,KAAK,KAAK;gBAChE,WAAU;;;;;;0BAEZ,8OAAC;gBAAI,WAAU;;oBACZ,0BACC,8OAAC;wBAAO,WAAU;wBAA0C,SAAS;kCAAU;;;;;;oBAEhF,uBACC,8OAAC;wBAAO,WAAU;wBAA4C,SAAS;kCAAO;;;;;;;;;;;;;;;;;;AAKxF"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/FX506/Desktop/Allumee/src/components/Transition.tsx"],"sourcesContent":["\"use client\";\r\n\r\ninterface TransitionProps {\r\n  id: number;\r\n  from: string;\r\n  to: string;\r\n  duration: number;\r\n  onDurationChange?: (newDuration: number) => void;\r\n}\r\n\r\nexport default function Transition({ from, to, duration, onDurationChange }: TransitionProps) {\r\n  return (\r\n    <div className=\"border p-4 m-2 text-gray-500 flex justify-between items-center bg-white shadow\">\r\n      <p>Transition: {from} → {to}</p>\r\n      <input\r\n        type=\"number\"\r\n        value={duration}\r\n        onChange={(e) => onDurationChange?.(parseInt(e.target.value) || 0)}\r\n        className=\"border p-2 w-20\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAUe,SAAS,WAAW,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,gBAAgB,EAAmB;IAC1F,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;;oBAAE;oBAAa;oBAAK;oBAAI;;;;;;;0BACzB,8OAAC;gBACC,MAAK;gBACL,OAAO;gBACP,UAAU,CAAC,IAAM,mBAAmB,SAAS,EAAE,MAAM,CAAC,KAAK,KAAK;gBAChE,WAAU;;;;;;;;;;;;AAIlB"}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/FX506/Desktop/Allumee/src/components/DurationStats.tsx"],"sourcesContent":["\"use client\";\r\n\r\ninterface DurationStatsProps {\r\n  totalScenes: number;\r\n  totalTransitions: number;\r\n}\r\n\r\nexport default function DurationStats({ totalScenes, totalTransitions }: DurationStatsProps) {\r\n  return (\r\n    <div className=\"bg-white p-4 mt-4 rounded shadow\">\r\n      <p className=\"text-lg font-semibold\">Durée totale du show : {totalScenes + totalTransitions} sec</p>\r\n      <p className=\"text-gray-600\">Durée des scènes : {totalScenes} sec</p>\r\n      <p className=\"text-gray-600\">Durée des transitions : {totalTransitions} sec</p>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAOe,SAAS,cAAc,EAAE,WAAW,EAAE,gBAAgB,EAAsB;IACzF,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAE,WAAU;;oBAAwB;oBAAwB,cAAc;oBAAiB;;;;;;;0BAC5F,8OAAC;gBAAE,WAAU;;oBAAgB;oBAAoB;oBAAY;;;;;;;0BAC7D,8OAAC;gBAAE,WAAU;;oBAAgB;oBAAyB;oBAAiB;;;;;;;;;;;;;AAG7E"}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/FX506/Desktop/Allumee/src/components/Controls.tsx"],"sourcesContent":["\"use client\";\r\n\r\ninterface ControlsProps {\r\n  onReset: () => void;\r\n  onLoad: () => void;\r\n  onSave: () => void;\r\n}\r\n\r\nexport default function Controls({ onReset, onLoad, onSave }: ControlsProps) {\r\n  return (\r\n    <div className=\"mt-4 flex gap-4\">\r\n      <button className=\"bg-red-500 text-white px-4 py-2 rounded\" onClick={onReset}>\r\n        Reset\r\n      </button>\r\n      <button className=\"bg-blue-500 text-white px-4 py-2 rounded\" onClick={onLoad}>\r\n        Load\r\n      </button>\r\n      <button className=\"bg-green-500 text-white px-4 py-2 rounded\" onClick={onSave}>\r\n        Save\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAQe,SAAS,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAiB;IACzE,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAO,WAAU;gBAA0C,SAAS;0BAAS;;;;;;0BAG9E,8OAAC;gBAAO,WAAU;gBAA2C,SAAS;0BAAQ;;;;;;0BAG9E,8OAAC;gBAAO,WAAU;gBAA4C,SAAS;0BAAQ;;;;;;;;;;;;AAKrF"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/FX506/Desktop/Allumee/src/components/ShowTable.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\r\nimport Scene from \"./Scene\";\r\nimport Transition from \"./Transition\";\r\nimport DurationStats from \"./DurationStats\";\r\nimport Controls from \"./Controls\";\r\n\r\nexport default function ShowTable() {\r\n  const [scenes, setScenes] = useState([{ id: 1, name: \"Scene 1\", duration: 30 }]);\r\n  const [transitions, setTransitions] = useState<{ id: number; from: string; to: string; duration: number }[]>([]);\r\n\r\n  useEffect(() => {\r\n    const savedScenes = localStorage.getItem(\"scenes\");\r\n    const savedTransitions = localStorage.getItem(\"transitions\");\r\n    if (savedScenes && savedTransitions) {\r\n      setScenes(JSON.parse(savedScenes));\r\n      setTransitions(JSON.parse(savedTransitions));\r\n    }\r\n  }, []);\r\n\r\n  const addScene = (index: number) => {\r\n    const newScene = { id: Date.now(), name: `Scene ${scenes.length + 1}`, duration: 30 };\r\n    const newScenes = [...scenes];\r\n    newScenes.splice(index + 1, 0, newScene);\r\n\r\n    const newTransitions = [...transitions];\r\n    newTransitions.splice(index, 0, {\r\n      id: Date.now(),\r\n      from: scenes[index].name,\r\n      to: newScene.name,\r\n      duration: 10,\r\n    });\r\n\r\n    setScenes(newScenes);\r\n    setTransitions(newTransitions);\r\n  };\r\n\r\n  const deleteScene = (id: number) => {\r\n    const sceneIndex = scenes.findIndex(scene => scene.id === id);\r\n    if (sceneIndex === -1) return;\r\n\r\n    const newScenes = scenes.filter(scene => scene.id !== id);\r\n    let newTransitions = [...transitions];\r\n\r\n    if (sceneIndex > 0 && sceneIndex < transitions.length) {\r\n      newTransitions[sceneIndex - 1] = {\r\n        ...newTransitions[sceneIndex - 1],\r\n        to: newScenes[sceneIndex]?.name || \"\",\r\n      };\r\n    }\r\n\r\n    newTransitions = newTransitions.filter((_, index) => index !== sceneIndex && index !== sceneIndex - 1);\r\n\r\n    setScenes(newScenes);\r\n    setTransitions(newTransitions);\r\n  };\r\n\r\n  const updateSceneName = (id: number, newName: string) => {\r\n    const updatedScenes = scenes.map(scene => scene.id === id ? { ...scene, name: newName } : scene);\r\n    setScenes(updatedScenes);\r\n  };\r\n\r\n  const updateSceneDuration = (id: number, newDuration: number) => {\r\n    setScenes(scenes.map(scene => scene.id === id ? { ...scene, duration: newDuration } : scene));\r\n  };\r\n\r\n  const updateTransitionDuration = (id: number, newDuration: number) => {\r\n    setTransitions(transitions.map(transition => transition.id === id ? { ...transition, duration: newDuration } : transition));\r\n  };\r\n\r\n  const saveToLocalStorage = () => {\r\n    localStorage.setItem(\"scenes\", JSON.stringify(scenes));\r\n    localStorage.setItem(\"transitions\", JSON.stringify(transitions));\r\n  };\r\n\r\n  const loadExampleData = () => {\r\n    const savedScenes = localStorage.getItem(\"scenes\");\r\n    const savedTransitions = localStorage.getItem(\"transitions\");\r\n\r\n    if (savedScenes && savedTransitions) {\r\n      setScenes(JSON.parse(savedScenes));\r\n      setTransitions(JSON.parse(savedTransitions));\r\n    } else {\r\n      setScenes([\r\n        { id: 1, name: \"Torche\", duration: 30 },\r\n        { id: 2, name: \"Phoenix\", duration: 45 },\r\n        { id: 3, name: \"Logo\", duration: 60 },\r\n      ]);\r\n      setTransitions([\r\n        { id: 1, from: \"Torche\", to: \"Phoenix\", duration: 12 },\r\n        { id: 2, from: \"Phoenix\", to: \"Logo\", duration: 19 },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const resetTable = () => {\r\n    setScenes([{ id: 1, name: \"Scene 1\", duration: 30 }]);\r\n    setTransitions([]);\r\n  };\r\n\r\n  const totalScenesDuration = scenes.reduce((total, scene) => total + scene.duration, 0);\r\n  const totalTransitionsDuration = transitions.reduce((total, transition) => total + transition.duration, 0);\r\n\r\n  // Fonction pour gérer le déplacement d'une scène\r\n  const onDragEnd = (result: any) => {\r\n    if (!result.destination) return;\r\n\r\n    const newScenes = [...scenes];\r\n    const [movedScene] = newScenes.splice(result.source.index, 1);\r\n    newScenes.splice(result.destination.index, 0, movedScene);\r\n    \r\n    setScenes(newScenes);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-100 p-6 rounded shadow\">\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"scenes\">\r\n          {(provided) => (\r\n            <div {...provided.droppableProps} ref={provided.innerRef}>\r\n              {scenes.map((scene, index) => (\r\n                <Draggable key={scene.id} draggableId={scene.id.toString()} index={index}>\r\n                  {(provided) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                    >\r\n                      <Scene\r\n                        name={scene.name}\r\n                        duration={scene.duration}\r\n                        onDelete={scenes.length > 1 ? () => deleteScene(scene.id) : undefined}\r\n                        onAdd={() => addScene(index)}\r\n                        onNameChange={(newName) => updateSceneName(scene.id, newName)}\r\n                        onDurationChange={(newDuration) => updateSceneDuration(scene.id, newDuration)}\r\n                      />\r\n                      {index < scenes.length - 1 && transitions[index] && (\r\n                        <Transition\r\n                          id={transitions[index].id}\r\n                          from={transitions[index].from}\r\n                          to={transitions[index].to}\r\n                          duration={transitions[index].duration}\r\n                          onDurationChange={(newDuration) => updateTransitionDuration(transitions[index].id, newDuration)}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n\r\n      <DurationStats totalScenes={totalScenesDuration} totalTransitions={totalTransitionsDuration} />\r\n      <Controls onReset={resetTable} onLoad={loadExampleData} onSave={saveToLocalStorage} />\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}